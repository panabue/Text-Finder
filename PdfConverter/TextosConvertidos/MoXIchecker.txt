MoXIchecker:
An Extensible Model Checker for MoXI
Salih Ates
, Dirk Beyer
, Po-Chun Chien
, and Nian-Ze Lee
LMU Munich, Munich, Germany
Abstract. MoXI is a new intermediate verification language introduced
in 2024 to promote the standardization and open-source implementations
for symbolic model checking by extending the SMT-LIB 2 language with
constructs to define state-transition systems. The tool suite of MoXI pro-
vides a translator from MoXI to Btor2, which is a lower-level intermediate
language for hardware verification, and a translation-based model checker,
which invokes mature hardware model checkers for Btor2 to analyze the
translated verification tasks. The extensibility of such a translation-based
model checker is restricted because more complex theories, such as integer
or real arithmetics, cannot be precisely expressed with bit-vectors of fixed
lengths in Btor2. We present MoXIchecker, the first model checker that
solves MoXI verification tasks directly. Instead of translating MoXI to
lower-level languages, MoXIchecker uses the solver-agnostic library PySMT
for SMT solvers as backend for its verification algorithms. MoXIchecker
is extensible because it accommodates verification tasks involving more
complex theories, not limited by lower-level languages, facilitates the
implementation of new algorithms, and is solver-agnostic by using the
API of PySMT. In our evaluation, MoXIchecker uniquely solved tasks that
use integer or real arithmetics, and achieved a comparable performance
against the translation-based model checker from the MoXI tool suite.
Keywords: Formal verification · Symbolic model checking · Intermediate
language · MoXI · Btor2 · SMT · SAT · PySMT · Exchange formats
1
Introduction
Symbolic model checking [1, 2] embraces a wide range of automatic techniques to
formally verify a model against a specification by encoding and searching the state
space symbolically. It has been applied to hardware, software, and cyber-physical
systems to ensure their safety and correct functionality. However, symbolic model
checking has not been adopted as widely as other “push-button” techniques for
quality assurance, such as testing, especially in industry. A major challenge is the
lack of standardized exchange formats and open-source implementations [3, 4].
Even though model checkers from the same research community work on the
same type of computational models, they often use different input formats, which
hinders the propagation of techniques. Moreover, some model checkers are closed-
source and make the comparison of verification algorithms complicated, because
arXiv:2407.15551v1  [cs.SE]  22 Jul 2024
2
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
techniques may need to be re-implemented in a different framework to achieve
fair comparison (this makes expensive transferability studies necessary [5, 6]).
Recently, a new intermediate verification language MoXI [3], the model ex-
change interlingua, has been proposed to address the aforementioned challenge.
MoXI aims to be (1) as expressive as necessary to accommodate real-world ap-
plications described in user-facing, higher-level modeling languages and (2) as
simple as possible to facilitate its translation to tool-oriented, lower-level inter-
mediate languages, for which efficient and effective model checkers are available.
It augments the SMT-LIB 2 [7] format with constructs to define state-transition
systems by using formulas in first-order logic to encode their initial and transition
conditions. MoXI inherits the expressiveness of SMT-LIB 2 and offers abundant
background theories to represent various computational models, ranging from
hardware circuits and software programs to cyber-physical systems. The precise
semantics of SMT-LIB 2 also enables the translation from MoXI to lower-level
intermediate languages. Using SMT formulas to precisely describe state-transition
systems has also been studied in the VMT [8] intermediate language.
Compared to other intermediate verification languages, such as the SMV [9]
language for finite-state transition systems or the Boogie [10] language for software
programs, using MoXI to represent model-checking problems separates the process
of encoding the semantics of computational models into SMT formulas from
the implementation of SMT-based verification approaches. This separation will
help decompose monolithic model checkers into several modular and reusable
components, e.g., standalone translators from higher-level languages to MoXI
and model-checking engines for MoXI verification tasks. A deeper discussion can
be found in a recent survey on transformation for verification [11].
1.1
Existing Tool Suite for MoXI
The tool suite of MoXI [12] offers translators from SMV to MoXI and from
MoXI to the word-level modeling language Btor2 [13], the prevailing format
for hardware model checking. The tool suite also implements a translation-based
model checker, MoXI-MC-Flow, by translating a MoXI task to an equisatisfiable
Btor2 task and invoking Btor2 model checkers, such as AVR [14], BtorMC [13],
and Pono [15], on the translated task. Translation-based verification approaches
have been actively studied in the literature. For example, sequential circuits in
Verilog [16] can be translated to SMV models [17, 18] or C programs [19] for
verification. Btor2 circuits have been translated to C programs and analyzed
by software verifiers [20, 21, 22]. C programs can also be translated to SMV or
Btor2 models and verified by hardware model checkers [23, 24].
While MoXI-MC-Flow can solve MoXI verification tasks by translating them
to Btor2 [12], the translation-based approach limits the expressiveness of the
model-checking flow because verification problems cannot be precisely represented
in Btor2 if they involve more complex background theories, such as integer or
real arithmetics. Moreover, to extend MoXI-MC-Flow with new algorithms, tool
developers need to dig into the Btor2 model checkers.
MoXIchecker: An Extensible Model Checker for MoXI
3
1.2
Motivation to Develop MoXIchecker
To address the extensibility gap of the translation-based model-checking flow
for MoXI, we implemented MoXIchecker, the first model checker that solves
MoXI verification tasks directly without translating them to other intermediate
languages. MoXIchecker takes as input a MoXI verification task, constructs the
SMT formulas used to define the task, and implements its verification algorithms
using the API of PySMT [25], a solver-agnostic Python library for SMT solvers.
Currently, MoXIchecker supports the quantifier-free theories of bit-vectors,
arrays, integers, and reals, and the implemented algorithms include BMC [26],
k-induction [27], and IC3/PDR [28].
The benefits of MoXIchecker compared to MoXI-MC-Flow are threefold.
First, MoXIchecker enjoys the complete expressiveness of SMT-LIB 2 and is
applicable to verification tasks involving more complex background theories, as
long as there exists an SMT solver supporting the used theory. In contrast, MoXI-
MC-Flow is inadequate if the used theory is not representable in lower-level
intermediate languages focusing on bit-vectors of fixed lengths and arrays. Second,
MoXIchecker allows for convenient extension and fast prototyping of model-
checking algorithms. To develop a new algorithm in MoXIchecker, one can
simply work with the SMT formulas describing the model and manipulate them
via the API of PySMT. In contrast, adding a new algorithm to the hardware model
checkers used by MoXI-MC-Flow may involve encoding the semantics of hardware
circuits. Moreover, MoXIchecker enables fair comparison of algorithms because
the number of confounding variables (e.g., from translation) is kept to a minimum.
Third, MoXIchecker has a robust frontend design because constructing SMT
formulas that describe a MoXI verification task via PySMT is purely syntactical
and less error-prone than translating the SMT formulas to Btor2.
Furthermore, MoXIchecker is meant for use in education. It is an ideal
framework for playing around with algorithms in course projects. The tool has
a clean architecture and a slim code base.
Contributions. To sum up, our contributions in this paper include:
1. MoXIchecker, the first model checker that verifies MoXI tasks directly,
2. implemented as an extensible framework to accommodate various background
theories and facilitate the development of algorithms for MoXI,
3. MoXIchecker’s first three algorithms, BMC, k-induction, and IC3/PDR, and
4. an evaluation of MoXIchecker with MoXI-MC-Flow on about 400 MoXI
verification tasks.
In our experiments, MoXIchecker solved a similar number of bit-vector
tasks as MoXI-MC-Flow, which used highly-optimized Btor2 model checkers
as backend. Moreover, MoXIchecker was able to uniquely solve tasks using
real arithmetics, which MoXI-MC-Flow cannot handle. These contributions are
significant and novel because MoXIchecker supports the standardization of
symbolic model checking around MoXI and provides an extensible framework for
open-source implementations of verification algorithms for MoXI.
4
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
2
Background
In this section, we provide background knowledge for symbolic model checking
and the intermediate verification language MoXI.
2.1
Symbolic Model Checking
The problem of symbolic model checking [1, 2] is to decide whether a model, usually
represented as a state-transition system [29, 30], satisfies a specification. A state-
transition system M can be described by an initial condition I(s), a transition
condition T(s, s′), and an invariance condition Inv(s), where s and s′ range
over possible states of M. Condition I(s) evaluates to ⊤if state s is an initial
state of M, and T(s, s′) evaluates to ⊤if state s can transit to state s′ via one
step in M (we use ⊤for true). A state bs is reachable if I(bs) evaluates to ⊤or
I(s0) ∧T(s0, s1) ∧. . . ∧T(sk−1, bs) is satisfiable for some k ≥1. Condition Inv(s)
is a constraint imposed on all reachable states in M (a reachable state that
violates Inv is excluded for analysis).
A specification φ can be represented by a formula in linear temporal logic
(LTL) [31], which is evaluated over the execution traces of a state-transition
system. In the following, we refer to the tuple (M, φ) as a verification task,
which asks if state-transition system M satisfies specification φ. Reachability
safety is an essential category of specifications, inspecting the reachability of
some target states marked by a reachable condition Q(s). A reachability-safety
verification task is described by the tuple (I, T, Inv, Q), where I, T, and Inv
define a state-transition system M and Q defines an LTL formula “always ¬Q”
as a specification φ for M. A reachability-safety verification task is safe (resp.
unsafe) if the target states are unreachable (resp. reachable).
In the research community of hardware model checking, verification tasks of
sequential circuits can be encoded by the word-level language Btor2 [13].
2.2
The Intermediate Verification Language MoXI
MoXI [3] extends the SMT-LIB 2 [7] format with constructs to describe verification
tasks. Inheriting the expressiveness of SMT-LIB 2, MoXI offers a variety of
background theories, ranging from bit-vectors and arrays (QF_BV and QF_ABV) to
linear and nonlinear arithmetics over integers and reals (QF_LIA, QF_LRA, QF_-
NIA, and QF_NRA), to represent models of hardware, software, and cyber-physical
systems. As for specifications, MoXI supports reachability-safety queries with
fairness constraints. We refer interested readers to the language design of MoXI [3]
for more details. In the following, we use an example to show how a verification
task is represented in MoXI.
Figure 1 shows a verification task of a three-bit counter in MoXI. Line 1
sets the background theory to QF_BV, which allows for quantifier-free formu-
las over the theory of bit-vectors with fixed sizes. Lines 2 to 8 define the be-
havior of the three-bit counter with command define-system and name the
counter main. Counter main has an output variable s, which is a bit-vector
of length three (attribute :output in line 4). Counter main has no inputs or
local variables (attributes :input in line 3 and :local in line 5, respectively).
MoXIchecker: An Extensible Model Checker for MoXI
5
1
(set−logic QF_BV)
2
(define−system main
3
:input ()
4
:output ((s (_ BitVec 3)))
5
:local ()
6
:init (= s #b000)
7
:trans (= s’ (bvadd s #b010))
8
:inv true)
9
(check−system main
10
:input ()
11
:output ((s (_ BitVec 3)))
12
:local ()
13
:reachable (rch_1
(= (bvurem s #b010) #b001))
14
:query (qry_rch_1 (rch_1)))
Fig. 1: An example verification task
in MoXI
The
initial
condition
in
line
6
(at-
tribute :init) initializes output s of
counter main to #b000. The transition con-
dition in line 7 (attribute :trans) incre-
ments the value of s by #b010 in each
step. Note that a primed variable is treated
as the next-state variable of its unprimed
counterpart by MoXI. That is, s’ holds
the value of s after one step. The invari-
ance condition in line 8 (attribute :inv)
imposes true as a constraint on all reach-
able states of counter main. The spec-
ification for counter main is described
by command check-system. The reach-
ability condition rch_1 in line 13 (at-
tribute :reachable) states that the value
of s is an odd number, i.e., the remainder of s divided by #b010 equals #b001.
Line 14 poses a query qry_rch_1 (attribute :query) to examine whether the LTL
formula “always ¬rch_1” is satisfied by all execution traces of counter main.
The MoXI tool suite [12] provides an alternative representation of MoXI
verification tasks in JSON format to facilitate tool development and information
exchange. Figure 2 shows the corresponding JSON file for the verification task
in Fig. 1. Our tool MoXIchecker takes MoXI verification tasks in JSON format
as input. For details of the JSON representation, we refer interested readers to
the MoXI JSON schema1 in the tool suite.
To analyze a MoXI verification task, the model checker MoXI-MC-Flow in the
MoXI tool suite translates the MoXI task to an equisatisfiable Btor2 verification
task and invokes hardware model checkers for Btor2, e.g., AVR [14], BtorMC [13],
and Pono [15], from the Hardware Model Checking Competitions [32].
3
Software Architecture of MoXIchecker
Figure 3 shows the software architecture of MoXIchecker, the first model checker
for MoXI without translating verification tasks to lower-level languages. Imple-
mented in the programming language Python, MoXIchecker is open-source on
GitLab2 and released under the Apache License 2.0. On a MoXI verification
task in JSON format, MoXIchecker uses the standard JSON package of Python
to load the input file and constructs SMT formulas for the initial, transition,
invariance, and reachable conditions by calling the API of the solver-agnostic
library PySMT [25] for SMT solvers. It then performs model checking on the
reachability-safety verification task (I, T, Inv, Q). The output of MoXIchecker on
a MoXI verification task is a verdict to indicate whether the task is safe or unsafe.
Different from MoXI-MC-Flow in the MoXI tool suite [12], which translates
verification tasks in MoXI to Btor2 [13] and invokes hardware model checkers,
1 https://github.com/ModelChecker/moxi-mc-flow/tree/main/json-schema
2 https://gitlab.com/sosy-lab/software/moxichecker
6
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
1
[ { "command": "set−logic", "logic": "QF_BV" },
2
{ "command": "define−system",
3
"symbol": "main",
4
"input": [],
5
"output": [{
6
"symbol": "s",
7
"sort": { "identifier": { "symbol": "BitVec", "indices": [3] }}}],
8
"local": [],
9
"init": {
10
"identifier": { "symbol": "=", "indices": [] },
11
"args": [{ "identifier": "s" }, { "identifier": "#b000" }]},
12
"trans": {
13
"identifier": { "symbol": "=", "indices": [] },
14
"args": [
15
{ "identifier": "s’" },
16
{"identifier": { "symbol": "bvadd", "indices": [] },
17
"args": [{ "identifier": "s" }, { "identifier": "#b010" }]}]},
18
"inv": { "identifier": "true" }},
19
{ "command": "check−system",
20
"symbol": "main",
21
"input": [],
22
"output": [{
23
"symbol": "s",
24
"sort": { "identifier": { "symbol": "BitVec", "indices": [3] }}}],
25
"local": [],
26
"reachable": [
27
{ "symbol": "rch_1",
28
"formula": { "identifier": { "symbol": "=", "indices": [] },
29
"args": [
30
{"identifier": { "symbol": "bvurem", "indices": [] },
31
"args": [{ "identifier": "s" }, { "identifier": "#b010" }]},
32
{ "identifier": "#b001" }]}}],
33
"query": [{ "symbol": "qry_rch_1", "formulas": ["rch_1"] }]}]
Fig. 2: A JSON representation of the MoXI verification task in Fig. 1
MoXIchecker implements its model-checking engines using the API of PySMT.
Currently, MoXIchecker supports QF_BV, QF_ABV, QF_LIA, QF_LRA, QF_NIA, and
QF_NRA as the background theory. The elegant software architecture facilitates
adding new background theories to MoXIchecker.
We adapted and integrated the implementations of BMC [26], k-induction [27],
and IC3/PDR [28] in PySMT3 into our framework. In addition, we demonstrate
the extensibility of MoXIchecker by contributing a k-induction implementation
that takes advantage of incremental solving of SMT solvers by reusing solver
stacks. Compared to the non-incremental version in PySMT, the incremental
k-induction was more efficient and solved more tasks in the evaluation.
3.1
Example
We demonstrate the working of MoXIchecker by invoking it on the verification
task in Fig. 1. MoXIchecker consumes the JSON file of the MoXI verification task
in Fig. 2 as input and constructs SMT formulas s = 0, s′ = s + 2, ⊤, and s%2 = 1,
as the initial, transition, invariance, and reachability conditions, respectively. Note
3 https://github.com/pysmt/pysmt/blob/master/examples/model_checking.py
MoXIchecker: An Extensible Model Checker for MoXI
7
MoXI verification task
(in JSON format)
Formula construction
(using PySMT)
Task (I, T, Inv, Q)
Model-checking engine
(using PySMT)
BMC [26]
k-Induction [27]
IC3/PDR [28]
New algorithm
Verdict
Fig. 3: Software architecture of MoXIchecker
that variable s is a bit-vector of length three, and variable s′ is its next-state
counterpart. To honor the invariance condition, MoXIchecker conjoins it with
initial and transition conditions, respectively. As the invariance condition is ⊤in
the example verification task, we omit it in the following explanation.
To solve the verification task, MoXIchecker considers “always ¬(s%2 = 1)”
as the specification for the state-transition system. By applying k-induction [27],
MoXIchecker shows that both the base case (s = 0) ⇒¬(s%2 = 1) and the
step case ¬(s%2 = 1) ∧(s′ = s + 1) ⇒¬(s′%2 = 1) for k = 1 hold. Therefore,
MoXIchecker concludes that counter main in Fig. 1 satisfies its specification.
3.2
Current Limitations
MoXI is an expressive and versatile intermediate language for describing verifica-
tion tasks. The current version of MoXIchecker (release 0.1) still misses some
language support for MoXI. For instance, MoXI allows the composition of multi-
ple state-transition systems via attribute :subsys in command define-system
and fairness constraints via attribute :fairness in command check-system.
In addition, MoXI defines a format for verification witnesses [33, 34], e.g., an
error trace if the specification is violated or an invariant if the specification is
satisfied. We are actively working on supporting these language features to make
MoXIchecker more comprehensive.
4
Evaluation
To demonstrate the performance and extensibility of MoXIchecker, we compared
it to MoXI-MC-Flow, the translation-based model checker for MoXI [12], which
invokes hardware model checkers for Btor2 as backend. Our experiments aim
to answer the following research questions:
• RQ1: Is MoXIchecker effective and efficient compared to MoXI-MC-Flow
on QF_BV tasks?
• RQ2: Can MoXIchecker solve tasks using more complex background theories,
which MoXI-MC-Flow cannot solve?
4.1
Experimental Setup
We evaluated MoXIchecker and MoXI-MC-Flow on two sets of MoXI verification
tasks in JSON format. The first benchmark set consists of 225 safe and 157 unsafe
QF_BV tasks, taken from the MoXI tool suite [12]. Due to the lack of publicly
available verification tasks involving more complex theories, we handcrafted 9 tasks
using the theories of QF_LIA, QF_LRA, QF_NIA, and QF_NRA to show the extensible
theory support of MoXIchecker.
8
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
Table 1: Summary of verification results on 382 QF_BV tasks
Tool
MoXIchecker
MoXI-MC-Flow
Backend
MathSAT
MathSATincr
Z3
Z3incr
AVR
Pono
Correct results
169
178
169
174
175
172
Proofs
44
46
47
47
45
45
Alarms
125
132
122
127
130
127
Errors and Unknown
213
204
213
208
207
210
We used MoXIchecker version 0.1 and MoXI-MC-Flow at commit 6240207d
in the experiments. MoXIchecker called SMT solvers Z3 [35] and MathSAT5 [36]
for QF_BV, QF_LIA, and QF_LRA tasks; for tasks using nonlinear arithmetics, MoXI-
checker employed Z3. MoXI-MC-Flow invoked Btor2 model checkers AVR [14]
and Pono [15] to solve QF_BV tasks; QF_LIA and QF_NIA tasks were also solved by
Btor2 model checkers via encoding integers with 32 bits. The version of MoXI-
MC-Flow used in our evaluation had no support for reals. Both MoXIchecker
and MoXI-MC-Flow used k-induction for verification. (For MoXI-MC-Flow,
AVR and Pono were configured to use k-induction on translated Btor2 tasks.)
All experiments were conducted on a machine that runs a GNU/Linux operat-
ing system (x86_64-linux, Ubuntu 22.04 with Linux kernel 5.15) and is equipped
with 2 TB of RAM in total and two 2.0 GHz AMD EPYC 7713 CPUs with
128 processing units each. Each task was limited to 2 CPU cores, 15 min of CPU
time, and 15 GB of RAM. We used BenchExec [37] to ensure reliable resource
measurement and reproducible results.
4.2
Experimental Results
RQ1: Performance of MoXIchecker. Table 1 summarizes the experimental
results of MoXIchecker and MoXI-MC-Flow on 382 QF_BV verification tasks.
MoXIchecker, when using MathSAT5 as the backend solver and incremental
solving, delivered the most correct results. Notably, MoXIchecker solved 17 tasks
that MoXI-MC-Flow failed to translate to Btor2.
Despite being implemented in Python, MoXIchecker demonstrated a compa-
rable performance to MoXI-MC-Flow, which employs highly-optimized hardware
model checkers written in C++ as backend. This is mainly because the bottleneck
of SMT-based verification algorithms lies in solving SMT formulas. A preliminary
run-time profiling for MoXIchecker by cProfile showed that solving formulas
accounted for more than 90 % of the run-time for the more time-consuming tasks.
The results suggest that using Python to construct and manipulate SMT formulas
does not incur much overhead for MoXIchecker.
In our evaluation, MoXIchecker was also more efficient than MoXI-MC-Flow
in terms of CPU-time consumption. Figure 4 shows a quantile plot comparing
MoXIchecker and MoXI-MC-Flow on the QF_BV tasks. A data point (x, y) in
the plot indicates that there are x tasks, each of which can be correctly solved
by the respective tool within a time bound y seconds. The figure shows that
MoXIchecker ran faster than MoXI-MC-Flow, especially for tasks that can be
MoXIchecker: An Extensible Model Checker for MoXI
9
0
20
40
60
80
100
120
140
160
180
1
10
100
1 000
n-th fastest correct result
CPU time (s)
MoXIchecker·MathSAT
MoXIchecker·MathSATincr
MoXI-MC-Flow·AVR
MoXI-MC-Flow·Pono
Fig. 4: MoXIchecker vs. MoXI-MC-Flow on 382 QF_BV tasks
.1
1
10
100
1 000
.1
1
10
100
1 000
MoXI-MC-Flow·AVR (s)
MoXIchecker·MathSATincr (s)
Fig. 5: Efficiency of MoXIchecker vs.
MoXI-MC-Flow on QF_BV tasks
.1
1
10
100
1 000
.1
1
10
100
1 000
MoXIchecker·MathSAT (s)
MoXIchecker·MathSATincr (s)
Fig. 6: Effect of incremental SMT solv-
ing in MoXIchecker on QF_BV tasks
solved quickly, because MoXI-MC-Flow had a slower startup time due to its
translation process (note the higher y-intercept of roughly 3 s in Fig. 4).
Figure 5 shows a head-to-head comparison of MoXIchecker (cf.
in Fig. 4)
and MoXI-MC-Flow (cf.
in Fig. 4) in a scatter plot. A data point (x, y)
in the plot represents a task that was solved by both MoXI-MC-Flow and
MoXIchecker, for which the former took x seconds, while the latter took y
seconds. The figure shows that the efficiency of MoXIchecker was competitive
against MoXI-MC-Flow. In particular, out of the 161 tasks solved by both,
MoXIchecker was faster than MoXI-MC-Flow on 117 tasks.
In addition to the comparison with MoXI-MC-Flow, we evaluated the impact
of backend solvers and incremental solving on MoXIchecker. From Table 1,
observe that MathSAT5 and Z3 delivered similar performance, with the for-
mer being slightly more effective. In contrast, incremental SMT solving had
a more pronounced effect on both the effectiveness and efficiency of MoXI-
checker. The performance improvement of our k-induction implementation
(MoXIchecker·MathSATincr) over the implementation provided by PySMT
(MoXIchecker·MathSAT) is also evident in Fig. 4 and Fig. 6.
10
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
Table 2: MoXIchecker vs. MoXI-MC-Flow on tasks using integers and reals
Task
Theory Verdict
MoXIchecker
MoXI-MC-Flow
FibonacciSequence
QF_LIA
safe
safe
unsafe
IntIncrement
QF_LIA
unsafe
unsafe
safe
IntCounter
QF_LIA
safe
safe
timeout
IntMultiply
QF_NIA
safe
safe
unsafe
BoundedLinearGrowth
QF_LRA
safe
safe
unsupported
DoubleDelay2
QF_LRA
unsafe
unsafe
unsupported
OscillatingRatio
QF_NRA
safe
safe
unsupported
SafeNonlinearGrowth
QF_NRA
safe
safe
unsupported
NonlinearGrowth
QF_NRA
unsafe
unsafe
unsupported
RQ2: Extensibility of MoXIchecker. Table 2 lists the results of MoXI-
checker and MoXI-MC-Flow on 9 handcrafted model-checking problems in-
volving integer and real arithmetics. MoXIchecker correctly solved all tasks.
In contrast, MoXI-MC-Flow produced wrong results or timeouts for the tasks
containing integers (upper half of Table 2) and had no support for tasks containing
reals (lower half of Table 2). Unlike MoXIchecker, which utilized Z3 and thus
supported the theories over integers and reals, MoXI-MC-Flow approximated
integers with bit-vectors (of length 32 by default). Due to the potential issues
of overflow and underflow in bit-vector arithmetics, such approximation is both
unsound and incomplete, therefore causing the incorrect verification results in
Table 2. This illustrative experiment shows that, compared to MoXI-MC-Flow,
MoXIchecker is (1) more reliable, as it does not yield wrong results due to
approximation, and (2) more versatile, as it supports many background theories.
5
Conclusion
We introduced MoXIchecker, the first model checker for MoXI that performs
model checking with the SMT formulas describing a MoXI task directly. Compared
to MoXI-MC-Flow [12], which translates verification tasks to Btor2 [13] and
invokes hardware model checkers, MoXIchecker accommodates MoXI verification
tasks with various background theories, facilitates the implementation of new
model-checking algorithms, abstracts from specific SMT solvers using the API
of PySMT, and has a robust frontend design that avoids potential translation
bugs. Currently, MoXIchecker supports the quantifier-free theories of bit-vectors,
arrays, integers, and reals, and implements BMC [26], k-induction [27], and
IC3/PDR [28] for verification. In our evaluation, MoXIchecker achieved a com-
parable performance against MoXI-MC-Flow on bit-vector tasks and uniquely
solved tasks using integer or real arithmetics. We envision MoXIchecker to facil-
itate open-source implementations for model-checking techniques around MoXI
and become a cornerstone for wider adoption of symbolic model checking. For
future work, we will enhance the language support of MoXIchecker, improve the
existing verification algorithms and implement new ones, and apply MoXIchecker
to software programs or cyber-physical systems.
MoXIchecker: An Extensible Model Checker for MoXI
11
Data-Availability Statement. The MoXIchecker release 0.1 is available at
Zenodo [38] and at https://gitlab.com/sosy-lab/software/moxichecker.
Funding Statement. This project was funded in part by the Deutsche Forschungs-
gemeinschaft (DFG) – 378803395 (ConVeY) and 536040111 (Bridge).
References
1. Burch, J.R., Clarke, E.M., McMillan, K.L., Dill, D.L., Hwang, L.J.: Symbolic
model checking: 1020 states and beyond. In: Proc. LICS. pp. 428–439. IEEE (1990).
https://doi.org/10.1109/LICS.1990.113767
2. McMillan, K.L.: Symbolic Model Checking. Springer (1993). https://doi.org/
10.1007/978-1-4615-3190-6
3. Rozier, K.Y., Dureja, R., Irfan, A., Johannsen, C., Nukala, K., Shankar, N., Tinelli,
C., Vardi, M.Y.: MoXI: An intermediate language for symbolic model checking. In:
Proc. SPIN. LNCS , Springer (2024)
4. Beyer, D., Wehrheim, H.: Verification artifacts in cooperative verification: Survey
and unifying component framework. In: Proc. ISoLA (1). pp. 143–167. LNCS 12476,
Springer (2020). https://doi.org/10.1007/978-3-030-61362-4_8
5. Beyer, D., Lee, N.Z., Wendler, P.: Interpolation and SAT-based model check-
ing revisited: Adoption to software verification. J. Autom. Reasoning (2024).
https://doi.org/10.1007/s10817-024-09702-9, preprint: https://doi.org/10.
48550/arXiv.2208.05046
6. Beyer, D., Chien, P.C., Jankola, M., Lee, N.Z.: A transferability study of
interpolation-based hardware model checking for software verification. Proc. ACM
Softw. Eng. 1(FSE) (2024). https://doi.org/10.1145/3660797
7. Barrett, C., Stump, A., Tinelli, C.: The SMT-LIB Standard: Version 2.0. Tech.
rep., University of Iowa (2010), https://smtlib.cs.uiowa.edu/papers/smt-lib-
reference-v2.0-r10.12.21.pdf
8. Cimatti, A., Griggio, A., Tonetta, S.: The VMT-LIB language and tools. In: Proc.
SMT. CEUR Workshop Proceedings, vol. 3185, pp. 80–89. CEUR-WS.org (2022).
https://ceur-ws.org/Vol-3185/extended9547.pdf
9. McMillan, K.L.: The SMV system. In: Symbolic Model Checking, pp. 61–85 (1993).
https://doi.org/10.1007/978-1-4615-3190-6_4
10. DeLine, R., Leino, R.: BoogiePL: A typed procedural language for check-
ing object-oriented programs. Tech. Rep. MSR-TR-2005-70, Microsoft Research
(2005). https://www.microsoft.com/en-us/research/publication/boogiepl-a-
typed-procedural-language-for-checking-object-oriented-programs/
11. Beyer, D., Lee, N.Z.: The transformation game: Joining forces for verification.
Springer (2024). https://www.sosy-lab.org/research/pub/2024-Katoen60.The_
Transformation_Game_Joining_Forces_for_Verification.pdf
12. Johannsen, C., Nukala, K., Dureja, R., Irfan, A., Shankar, N., Tinelli, C., Vardi,
M.Y., Rozier, K.Y.: Symbolic model-checking intermediate-language tool suite. In:
Proc. CAV. LNCS , Springer (2024)
13. Niemetz, A., Preiner, M., Wolf, C., Biere, A.: Btor2, BtorMC, and Boolector
3.0. In: Proc. CAV. pp. 587–595. LNCS 10981, Springer (2018). https://doi.org/
10.1007/978-3-319-96145-3_32
14. Goel, A., Sakallah, K.: AVR: Abstractly verifying reachability. In: Proc. TACAS.
pp. 413–422. LNCS 12078, Springer (2020). https://doi.org/10.1007/978-3-030-
45190-5_23
12
Salih Ates, Dirk Beyer, Po-Chun Chien, and Nian-Ze Lee
15. Mann, M., Irfan, A., Lonsing, F., Yang, Y., Zhang, H., Brown, K., Gupta, A.,
Barrett, C.W.: Pono: A flexible and extensible SMT-based model checker. In: Proc.
CAV. pp. 461–474. LNCS 12760, Springer (2021). https://doi.org/10.1007/978-
3-030-81688-9_22
16. IEEE standard for Verilog hardware description language (2006). https://doi.org/
10.1109/IEEESTD.2006.99495
17. Minhas, M., Hasan, O., Saghar, K.: Ver2Smv: A tool for automatic Verilog to
SMV translation for verifying digital circuits. In: Proc. ICEET. pp. 1–5 (2018).
https://doi.org/10.1109/ICEET1.2018.8338617
18. Irfan, A., Cimatti, A., Griggio, A., Roveri, M., Sebastiani, R.: Verilog2SMV: A
tool for word-level verification. In: Proc. DATE. pp. 1156–1159 (2016), https://
ieeexplore.ieee.org/document/7459485
19. Mukherjee, R., Tautschnig, M., Kroening, D.: v2c: A Verilog to C translator. In: Proc.
TACAS. pp. 580–586. LNCS 9636, Springer (2016). https://doi.org/10.1007/978-
3-662-49674-9_38
20. Beyer, D., Chien, P.C., Lee, N.Z.: Bridging hardware and software analysis with
Btor2C: A word-level-circuit-to-C translator. In: Proc. TACAS (2). pp. 152–172.
LNCS 13994, Springer (2023). https://doi.org/10.1007/978-3-031-30820-8_12
21. Ádám, Z., Beyer, D., Chien, P.C., Lee, N.Z., Sirrenberg, N.: Btor2-Cert: A certify-
ing hardware-verification framework using software analyzers. In: Proc. TACAS (3).
pp. 129–149. LNCS 14572, Springer (2024). https://doi.org/10.1007/978-3-031-
57256-2_7
22. Tafese, J., Garcia-Contreras, I., Gurfinkel, A.: Btor2MLIR: A format and toolchain
for hardware verification. In: Proc. FMCAD. pp. 55–63. IEEE (2023). https://
doi.org/10.34727/2023/ISBN.978-3-85448-060-0_13
23. Chien, P.C., Lee, N.Z.: CPV: A circuit-based program verifier (competition con-
tribution). In: Proc. TACAS (3). pp. 365–370. LNCS 14572, Springer (2024).
https://doi.org/10.1007/978-3-031-57256-2_22
24. Griggio, A., Jonáš, M.: Kratos2: An SMT-based model checker for imperative
programs. In: Proc. CAV. pp. 423–436. Springer (2023). https://doi.org/10.1007/
978-3-031-37709-9_20
25. Gario, M., Micheli, A.: PySMT: A solver-agnostic library for fast prototyping of
SMT-based algorithms. In: Proc. SMT (2015)
26. Biere, A., Cimatti, A., Clarke, E.M., Zhu, Y.: Symbolic model checking without
BDDs. In: Proc. TACAS. pp. 193–207. LNCS 1579, Springer (1999). https://
doi.org/10.1007/3-540-49059-0_14
27. Sheeran, M., Singh, S., Stålmarck, G.: Checking safety properties using induction
and a SAT-solver. In: Proc. FMCAD, pp. 127–144. LNCS 1954, Springer (2000).
https://doi.org/10.1007/3-540-40922-X_8
28. Bradley, A.R.: SAT-based model checking without unrolling. In: Proc. VMCAI. pp.
70–87. LNCS 6538, Springer (2011). https://doi.org/10.1007/978-3-642-18275-
4_7
29. Hughes, G.E., Cresswell, M.J.: A New Introduction to Modal Logic. Routledge
(1996). https://www.worldcat.org/isbn/978-0-41512-600-7
30. Clarke, E.M., Henzinger, T.A., Veith, H., Bloem, R.: Handbook of Model Checking.
Springer (2018). https://doi.org/10.1007/978-3-319-10575-8
31. Piterman, N., Pnueli, A.: Temporal logic and fair discrete systems. In: Handbook
of Model Checking, pp. 27–73. Springer (2018). https://doi.org/10.1007/978-3-
319-10575-8_2
MoXIchecker: An Extensible Model Checker for MoXI
13
32. Biere, A., van Dijk, T., Heljanko, K.: Hardware model checking competition 2017.
In: Proc. FMCAD. p. 9. IEEE (2017). https://doi.org/10.23919/FMCAD.2017.
8102233
33. Beyer, D., Dangl, M., Dietsch, D., Heizmann, M., Lemberger, T., Tautschnig, M.:
Verification witnesses. ACM Trans. Softw. Eng. Methodol. 31(4), 57:1–57:69 (2022).
https://doi.org/10.1145/3477579
34. McConnell, R.M., Mehlhorn, K., Näher, S., Schweitzer, P.: Certifying algorithms.
Computer Science Review 5(2), 119–161 (2011). https://doi.org/10.1016/j.
cosrev.2010.09.009
35. de Moura, L.M., Bjørner, N.: Z3: An efficient SMT solver. In: Proc. TACAS. pp. 337–
340. LNCS 4963, Springer (2008). https://doi.org/10.1007/978-3-540-78800-
3_24
36. Cimatti, A., Griggio, A., Schaafsma, B.J., Sebastiani, R.: The MathSAT5 SMT
solver. In: Proc. TACAS. pp. 93–107. LNCS 7795, Springer (2013). https://doi.
org/10.1007/978-3-642-36742-7_7
37. Beyer, D., Löwe, S., Wendler, P.: Reliable benchmarking: Requirements and solutions.
Int. J. Softw. Tools Technol. Transfer 21(1), 1–29 (2019). https://doi.org/10.
1007/s10009-017-0469-y
38. Ates, S., Beyer, D., Chien, P.C., Lee, N.Z.: MoXIchecker release 0.1. Zenodo
(2024). https://doi.org/10.5281/zenodo.12787654
